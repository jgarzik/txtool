#!/usr/bin/env node
// MIT/X11-like license.  See LICENSE.txt.
// Copyright 2013 BitPay, Inc.

require('buffertools');
var fs = require('fs');
var util = require('util');
var program = require('commander');
var BitcoinRPC = require('libcoin/RpcClient').class();
var Transaction = require('libcoin/Transaction').class();
var Address = require('libcoin/Address').class();
var Wallet = require('libcoin/Wallet').class();
var Script = require('libcoin/Script').class();
var coinUtil = require('libcoin/util/util');
var Parser = require('libcoin/util/BinaryParser').class();
var bignum = require('bignum');
var TXTOOL_VERSION = '0.2';
var rpc = new BitcoinRPC({
		'port' : 18332,
		'user' : 'user',
		'pass' : 'pass',
		'protocol' : 'http'
});

program
	.version(TXTOOL_VERSION)
	.option('-f, --file [file]', 'Load/store transaction state to/from JSON file [txstatedb.json]', 'txstatedb.json')
	.option('-P, --pass [passphrase]', 'AES wallet passphrase')
	.option('-w, --wallet [file]', 'AES wallet filename')
	.parse(process.argv);

var statedb_fn = program.file;

// Our empty wallet defaults
var wallet = undefined;
var network = undefined;

var datastore = {};

function network_load(netname)
{
	wallet.setNetwork(netname);
	network = wallet.network;
}

function wallet_load(filename)
{
	wallet.readSync(filename, program.pass);
	network_load(wallet.datastore.network);
}

function wallet_store()
{
	wallet.writeSync(program.wallet, program.pass);
}

if (program.wallet) {
	var wallet = new Wallet();
	wallet.datastore.client = 'cosign';
	wallet.datastore.client_version = TXTOOL_VERSION;
	wallet.datastore.network = 'livenet';

	wallet_load(program.wallet);
}

function list_commands()
{
	var s = "cosign command summary:\n";
	s += "clean\t\tRemove transaction state database\n";
	s += "dump\t\tInspect internal transaction state\n";
	s += "help\t\tList this command summary\n";
	s += "init\t\tInitialize new transaction state database\n";
	s += "inputs TXID1 VOUT1 TXID2 VOUT2...\n\t\tAppend inputs to TX\n";
	s += "inputs.clear\tClear list of inputs\n";
	s += "multisig N-REQUIRED KEY1 KEY2 KEY3...\n\t\tBegin new multi-sig tx\n";
	s += "nreq N-REQUIRED\tSpecific number of sigs required for a multisig tx\n";
	s += "outputs ADDRESS1 VALUE1 ADDRESS2 VALUE2...\n\t\tAppend outs to TX\n";
	s += "outputs.clear\tClear list of TX outputs\n";
	s += "pubkey.get ADDRESS\n\t\tLookup pubkey in wallet, given bitcoin address\n";
	s += "pubkeys KEY1 KEY2 KEY3...\n\t\tAdd to list of pubkeys / bitcoin addresses\n";
	s += "pubkeys.clear\tClear list of pubkeys\n";
	s += "raw SERIALIZED-TX\n\t\tInput serialized transaction from command line\n";
	s += "raw.append FILE\tAppend FILE to serialized transaction data\n";
	s += "raw.clear\tClear serialized tx data\n";
	s += "raw.create\tCreate raw tx, given inputs/outputs parameters\n";
	s += "raw.decode\tDecode raw tx, to JSON object\n";
	s += "raw.get TXID\tGet raw tx, given hash txid\n";
	s += "raw.read FILE\tInput serialized transaction from file\n";
	s += "raw.send\tSend raw tx to network via RPC\n";
	s += "raw.sign [anyonecanpay]\tSign transaction, if possible\n";
	s += "raw.write FILE\tOutput serialize transaction to file\n";
	s += "wallet.msig\tCommit in-memory multisig data to wallet,\n\t\treturning a multisig payment address.\n";
	console.log(s);
}

function remove_database(callback)
{
	fs.exists(statedb_fn, function(exists) {
		if (exists)
			fs.unlink(statedb_fn, function(err) {
				if (err) throw err;
				callback();
			});
	});
}

function write_datastore(callback)
{
	var tmp_fn = statedb_fn + ".tmp";

	fs.writeFile(tmp_fn, JSON.stringify(datastore), function(err) {
		if (err) throw err;
		fs.rename(tmp_fn, statedb_fn, callback);
	});
}

function parse_nreq(idx)
{
	if (idx >= program.args.length) {
		throw new Error("N-Required argument missing");
	}

	var re = /^\d+$/;
	var arg = program.args[idx];
	if (!re.test(arg)) {
		throw new Error("Invalid N-Required argument");
	}

	var n_req = parseInt(arg, 10);
	if (n_req < 1 || n_req > 50) {
		throw new Error("Out of range N-Required arg");
	}

	datastore['n_required'] = n_req;
}

function parse_pubkeys(start_idx)
{
	// init 'pubkeys'
	if (datastore['pubkeys'] == undefined)
		datastore['pubkeys'] = [];

	// append to list of pubkeys
	for (var i = start_idx; i < program.args.length; i++) {
		datastore['pubkeys'].push(String(program.args[i]));
	}
}

function cmd_multisig()
{
	parse_nreq(1);

	datastore['pubkeys'] = [];	// clear, if not already
	parse_pubkeys(2);

	write_datastore(function(err) {});
}

function cmd_nreq()
{
	parse_nreq(1);
	write_datastore(function(err) {});
}

function ds_push_pubkey(pubkeyStr)
{
	if (datastore['pubkeys'] == undefined)
		datastore['pubkeys'] = [];

	datastore['pubkeys'].push(pubkeyStr);

	console.log(pubkeyStr);
}

function pubkey_get_cb(err, resp)
{
	if (err) throw new Error(err['message']);
	if (!resp['result']['pubkey'])
		throw new Error("Unable to obtain pubkey from RPC wallet");

	ds_push_pubkey(String(resp['result']['pubkey']));
	write_datastore(function(err) {});
}

function cmd_pubkey_get_file(addrStr)
{
	var addr = new Address(addrStr);
	var obj = wallet.findKeyHash(addr.payload());
	if (!obj)
		throw new Error("Unable to obtain pubkey from wallet");

	ds_push_pubkey(obj.pub);
	write_datastore(function(err) {});
}

function cmd_pubkey_get(address)
{
	if (wallet)
		cmd_pubkey_get_file(address);
	else
		rpc.validateAddress(address, pubkey_get_cb);
}

function cmd_pubkeys()
{
	parse_pubkeys(1);
	write_datastore(function(err) {});
}

function cmd_inputs()
{
	if (datastore['inputs'] == undefined)
		datastore['inputs'] = [];

	for (var i = 1; i < program.args.length; i += 2) {
		var txid = String(program.args[i]);
		var vout = program.args[i + 1];
		var obj = {
			'txid' : txid,
			'vout' : vout
		};

		datastore['inputs'].push(obj);
	}

	write_datastore(function(err) {});
}

function cmd_outputs()
{
	if (datastore['outputs'] == undefined)
		datastore['outputs'] = {};

	for (var i = 1; i < program.args.length; i += 2) {
		var addr = String(program.args[i]);
		var value = program.args[i + 1];

		datastore['outputs'][addr] = value;
	}

	write_datastore(function(err) {});
}

function cmd_raw(in_str, append)
{
	var re = new RegExp('([\\da-fA-F]+)');
	in_str = String(in_str);
	var matches = in_str.match(re);
	if (matches == null)
		throw new Error("Hex transaction data not supplied");

	var hexstr = matches[1];
	if (append && datastore['raw'])
		datastore['raw'] += hexstr;
	else
		datastore['raw'] = hexstr;

	write_datastore(function(err) {});
}

function cmd_raw_create_internal()
{
	var txobj = {};
	txobj.version = 1;
	txobj.lock_time = 0;
	txobj.ins = [];
	txobj.outs = [];

	datastore.inputs.forEach(function(inputobj) {
		var txin = {};
		txin.s = coinUtil.EMPTY_BUFFER;
		txin.q = 0xffffffff;

		var hash = new Buffer(inputobj.txid, 'hex');
		hash.reverse();
		var vout = parseInt(inputobj.vout);
		var voutBuf = new Buffer(4);
		voutBuf.writeUInt32LE(vout, 0);

		txin.o = Buffer.concat([hash, voutBuf]);

		txobj.ins.push(txin);
	});

	var keys = Object.keys(datastore.outputs);
	keys.forEach(function(addrStr) {
		var addr = new Address(addrStr);
		var script = Script.createPubKeyHashOut(addr.payload());

		var valueNum = bignum(datastore.outputs[addrStr]);
		var value = coinUtil.bigIntToValue(valueNum);

		var txout = {
			v: value,
			s: script.getBuffer(),
		};

		txobj.outs.push(txout);
	});

	var tx = new Transaction(txobj);
	cmd_raw(tx.serialize().toString('hex'), false);
}

function cmd_raw_create()
{
	if (!datastore['inputs'] || !datastore['outputs'])
		throw new Error("missing inputs and/or outputs");

	cmd_raw_create_internal();
}

function raw_decode_cb(err, resp)
{
	if (err) throw new Error(err['message']);
	console.log(util.inspect(resp['result'], {'depth':1000}));
}

function cmd_raw_decode()
{
	if (!datastore['raw'])
		throw new Error("Missing raw transaction");

	rpc.decodeRawTransaction(datastore['raw'], raw_decode_cb);
}

function raw_get_cb(err, resp)
{
	if (err) throw new Error(err['message']);
	cmd_raw(resp['result'], false);
}

function cmd_raw_get(txid)
{
	rpc.getRawTransaction(txid, raw_get_cb);
}

function raw_append_cb(err, data)
{
	if (err) throw err;
	cmd_raw(data, true);
}

function cmd_raw_append(filename)
{
	fs.readFile(filename, {'encoding':'utf8'}, raw_append_cb);
}

function raw_read_cb(err, data)
{
	if (err) throw err;
	cmd_raw(data, false);
}

function cmd_raw_read(filename)
{
	fs.readFile(filename, {'encoding':'utf8'}, raw_read_cb);
}

function raw_send_cb(err, resp)
{
	if (err) throw new Error(err['message']);
	console.log(resp['result']);
}

function cmd_raw_send()
{
	if (!datastore['raw'])
		throw new Error("Missing raw transaction");

	rpc.sendRawTransaction(datastore['raw'], raw_send_cb);
}

function cmd_raw_sign_pubkeyhash(anypay, tx, i, scriptPubKey, txSigHash)
{
	var pubKeyHash = scriptPubKey.captureOne();
	var wkey = wallet.findKeyHash(pubKeyHash);
	if (!wkey)
		return 0;		// did no work; signed nothing

	var wkey = new WalletKey({network: network});
	wkey.fromObj(wkeyObj);

	var sigRaw = wkey.privKey.signSync(txSigHash);

	var sigType = new Buffer(1);
	sigType[0] = anypay ? SIGHASH_ANYONECANPAY : SIGHASH_ALL;

	var sig = Buffer.concat(sigRaw, sigType);

	var scriptSig = new Script();
	scriptSig.chunks.push(sig);
	scriptsig.chunks.push(wkey.privKey.public);
	scriptSig.updateBuffer();

	tx.ins[i].s = scriptSig.getBuffer();

	return 1;			// signed 1 signature
}

function pubkeyHexHash(pubkeyHex)
{
	var pubkey = new Buffer(pubkeyHex, 'hex');
	var pubKeyHash = coinUtil.sha256ripe160(pubkey);
	return pubKeyHash;
}

function findByPubkey(pubkeyHex)
{
	var pkh = pubkeyHexHash(pubkeyHex);
	var wkey = wallet.findKeyHash(pkh);
	return wkey;
}

function cmd_raw_sign_pubkey(anypay, tx, i, scriptPubKey, txSigHash)
{
	var pubkey = scriptPubKey.captureOne();
	var pubKeyHash = coinUtil.sha256ripe160(pubkey);
	var wkeyObj = wallet.findKeyHash(pubKeyHash);
	if (!wkeyObj)
		return 0;		// did no work; signed nothing

	var wkey = new WalletKey({network: network});
	wkey.fromObj(wkeyObj);

	var sigRaw = wkey.privKey.signSync(txSigHash);

	var sigType = new Buffer(1);
	sigType[0] = anypay ? SIGHASH_ANYONECANPAY : SIGHASH_ALL;

	var sig = Buffer.concat(sigRaw, sigType);

	var scriptSig = new Script();
	scriptSig.chunks.push(sig);
	scriptSig.updateBuffer();

	tx.ins[i].s = scriptSig.getBuffer();

	return 1;			// signed 1 signature
}

function updateMultiSig(scriptSigBuf, sig, index, n_keys)
{
	if (!scriptSigBuf)
		scriptSigBuf = util.EMPTY_BUFFER;
	var scriptSig = new Script(scriptSigBuf);

	if (scriptSig.chunks.length < n_keys) {
		while (scriptSig.chunks.length < n_keys)
			scriptSig.chunks.push(util.EMPTY_BUFFER);
	}
	
	scriptSig.chunks[index] = sig;
	scriptSig.updateBuffer();

	return scriptSig.getBuffer();
}

function cmd_raw_sign_multisig(anypay, tx, i, scriptPubKey, txSigHash)
{
	var pubkeys = scriptPubKey.capture();
	var wkeys = {};
	var index = 0;
	var n_signed = 0;
	pubkeys.forEach(function(pubkey) {
		var pubKeyHash = coinUtil.sha256ripe160(pubkey);
		var wkeyObj = wallet.findKeyHash(pubKeyHash);
		if (wkeyObj) {
			var wkey = new WalletKey({network: network});
			wkey.fromObj(wkeyObj);

			var sigRaw = wkey.privKey.signSync(txSigHash);

			var sigType = new Buffer(1);
			sigType[0] = anypay? SIGHASH_ANYONECANPAY : SIGHASH_ALL;

			var sig = Buffer.concat(sigRaw, sigType);

			tx.ins[i].s = updateMultiSig(tx.ins[i].s, sig,
						index, pubkeys.length);
			n_signed++;
		}

		index++;
	});

	return n_signed;
}

function cmd_raw_sign_scripthash(anypay, tx, i, scriptPubKey, txSigHash)
{
	var scriptHash = scriptPubKey.capture();
	var addr = new Address(network.addressScript, scriptHash);
	var addrStr = addr.as('base58');
	if (!(addrStr in wallet.scripts))
		return;

	var scriptHex = wallet.scripts[addrStr];
	var scriptBuf = new Buffer(scriptHex, 'hex');
	var scriptPubKey = new Script(scriptBuf);
	var scriptType = scriptPubKey.classify();
	var rc = -1;

	var txSigHash = tx.hashForsignature(scriptPubKey, i,
				       anypay ? SIGHASH_ANYONECANPAY :
				       SIGHASH_ALL);
	switch (scriptType) {
	case TX_PUBKEYHASH:
		rc = cmd_raw_sign_pubkeyhash(anypay, tx, i, scriptPubKey, txSigHash);
		break;
	case TX_MULTISIG:
		rc = cmd_raw_sign_multisig(anypay, tx, i, scriptPubKey, txSigHash);
		break;
	case TX_PUBKEY:
		rc = cmd_raw_sign_pubkey(anypay, tx, i, scriptPubKey, txSigHash);
		break;
	default:
		return -1;
	}

	if (rc > 0) {		// FIXME: wrong for some multisig
		var scriptSigBuf = tx.ins[i].s;
		var scriptSig = new Script(scriptSigBuf);
		scriptSig.chunks.push(scriptBuf);
		scriptSig.updateBuffer();
		tx.ins[i].s = scriptSig.getBuffer();
	}
	
	return rc;

}

function cmd_raw_sign_internal2(anypay, tx, inputIdx, scriptObj)
{
	// console.dir(tx);
	var txin = tx.ins[inputIdx];
	if (!txin)
		return -2;	// invalid?
	if (txin.s.length > 0)
		return -1;	// already signed, did no work

	var scriptBuf = new Buffer(scriptObj['hex'], 'hex');
	var scriptPubKey = new Script(scriptBuf);
	var scriptType = scriptPubKey.classify();
	var rc = -1;

	var txSigHash = tx.hashForSignature(scriptPubKey, inputIdx,
				       anypay ? Transaction.SIGHASH_ANYONECANPAY :
				       Transaction.SIGHASH_ALL);
	switch (scriptType) {
	case TX_UNKNOWN:
		break;
	case TX_PUBKEYHASH:
		rc = cmd_raw_sign_pubkeyhash(anypay, tx, inputIdx, scriptPubKey, txSigHash);
		break;
	case TX_SCRIPTHASH:
		rc = cmd_raw_sign_scripthash(anypay, tx, inputIdx, scriptPubKey, txSigHash);
		break;
	case TX_MULTISIG:
		rc = cmd_raw_sign_multisig(anypay, tx, inputIdx, scriptPubKey, txSigHash);
		break;
	case TX_PUBKEY:
		rc = cmd_raw_sign_pubkey(anypay, tx, inputIdx, scriptPubKey, txSigHash);
		break;
	}
	
	return 0;		// did no work; signed nothing
}

function cmd_raw_sign_internal(anypay)
{
	var rawbuf = new Buffer(datastore['raw'], 'hex');
	var parser = new Parser(rawbuf);
	var tx = new Transaction();
	tx.parse(parser);
	var inputs = tx.inputs();

	var inputIdx = 0;
	do {
		var inputIdxCopy = inputIdx;
		var input = inputs[inputIdxCopy];
		var hashStr = coinUtil.formatHashFull(input[0]);
		rpc.getTxOut(hashStr, input[1], function(err, resp) {
			if (err) throw new Error(err['message']);

			var rpcres = resp['result'];
			var scriptObj = rpcres['scriptPubKey'];

			var rc = cmd_raw_sign_internal2(anypay, tx, inputIdxCopy, scriptObj);
			// console.log("int2 rc = ", rc);
		});

		inputIdx++;
	} while (inputIdx < inputs.length);
}

function raw_sign_cb(err, resp)
{
	if (err) throw new Error(err['message']);
	var result = resp['result'];
	var hexstr = result['hex'];
	var complete = result['complete'];

	console.log(complete ? "sigs:complete" : "sigs:partial");

	if (hexstr != datastore['raw']) {
		datastore['raw'] = hexstr;
		console.log("raw:updated");
		write_datastore(function(err) {});
	} else
		console.log("raw:unchanged");
}

function cmd_raw_sign(start_idx)
{
	if (!datastore['raw'])
		throw new Error("Missing raw transaction");

	var anypay = false;

	// scan list of command line options
	for (var i = start_idx; i < program.args.length; i++) {
		switch (program.args[i]) {
		case "anyonecanpay":
			anypay = true;
			break;

		default:
			throw new Error("Unknown raw.sign option");
		}
	}

	if (wallet)
		cmd_raw_sign_internal(anypay)
	else
		rpc.signRawTransaction(datastore['raw'], null, null,
				       anypay ? 'ALL|ANYONECANPAY' : 'ALL',
				       raw_sign_cb);
}

function cmd_raw_write(filename)
{
	if (datastore['raw'] == undefined)
		throw new Error("No raw transaction data stored in memory");
	
	fs.writeFile(filename, datastore['raw'], function(err) {});
}

function wallet_msig_cb(err, resp)
{
	if (err) throw new Error(err['message']);
	console.log(resp['result']);
}

function cmd_wallet_msig_rpc()
{
	rpc.addMultiSigAddress(datastore['n_required'], datastore['pubkeys'],
			       wallet_msig_cb);
}

function cmd_wallet_msig_file()
{
	var pubkeys = wallet.expandKeys(datastore['pubkeys']);
	var script = Script.createMultisig(datastore['n_required'], pubkeys);
	var addrStr = wallet.addScript(script);
	wallet_store();
	console.log(addrStr);
}

function cmd_wallet_msig()
{
	if (!datastore['n_required'] || !datastore['pubkeys'])
		throw new Error("Missing N-Required and/or pubkeys");

	if (wallet)
		cmd_wallet_msig_file();
	else
		cmd_wallet_msig_rpc();
}

function main()
{
	if (program.args.length == 0) {
		console.error("No command specified.");
		list_commands();
		return;
	}

	var cmd = program.args[0];
	
	if (cmd != 'init' && cmd != 'help' && cmd != 'clean') {
		try {
			datastore = JSON.parse(fs.readFileSync(statedb_fn));
		} catch(e) {
			console.error(statedb_fn, "must be a valid JSON file.  Run 'init' command to create a new one.");
			return;
		}
	}

	switch (cmd) {

	case "clean":
		remove_database(function(err) {});
		break;

	case "dump":
		console.dir(datastore);
		break;

	default:
		console.error("Unknown command", cmd);
		// fall through

	case "help":
		list_commands();
		return;
	
	case "init":
		write_datastore(function(err) {});
		break;
	
	case "inputs":
		cmd_inputs();
		break;
	case "inputs.clear":
		delete datastore['inputs'];
		write_datastore(function(err) {});
		break;

	case "multisig":
		cmd_multisig();
		break;
	
	case "nreq":
		cmd_nreq();
		break;

	case "outputs":
		cmd_outputs();
		break;
	case "outputs.clear":
		delete datastore['outputs'];
		write_datastore(function(err) {});
		break;

	case "pubkey.get":
		if (program.args.length < 2)
			throw new Error("Missing required address param");
		cmd_pubkey_get(program.args[1]);
		break;

	case "pubkeys":
		cmd_pubkeys();
		break;

	case "pubkeys.clear":
		delete datastore['pubkeys'];
		write_datastore(function(err) {});
		break;

	case "raw":
		if (program.args.length < 2)
			throw new Error("Missing required hex-string param");
		cmd_raw(program.args[1], false);
		break;
	case "raw.append":
		if (program.args.length < 2)
			throw new Error("Missing required filename param");
		cmd_raw_append(program.args[1]);
		break;
	case "raw.clear":
		delete datastore['raw'];
		write_datastore(function(err) {});
		break;
	case "raw.create":
		cmd_raw_create();
		break;
	case "raw.decode":
		cmd_raw_decode();
		break;
	case "raw.get":
		if (program.args.length < 2)
			throw new Error("Missing required txid param");
		cmd_raw_get(program.args[1]);
		break;
	case "raw.read":
		if (program.args.length < 2)
			throw new Error("Missing required filename param");
		cmd_raw_read(program.args[1]);
		break;
	case "raw.send":
		cmd_raw_send();
		break;
	case "raw.sign":
		cmd_raw_sign(1);
		break;
	case "raw.write":
		if (program.args.length < 2)
			throw new Error("Missing required filename param");
		cmd_raw_write(program.args[1]);
		break;

	case "wallet.msig":
		cmd_wallet_msig();
		break;
	}
}

main();

