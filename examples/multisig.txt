
Example: 2-of-3 multisig (2 signatures required, 3 public keys)

1) Initialize db.

$ ./cosign init

2) Obtain three bitcoin addresses,
	mxDoMG9BogJ6kmgiTJNxhaAUUh11j3HWHr
	myGFNvUkRL3DTWHgKvuv29JW1TkcaihsSN
	mr3q8AeyLX53h9JctDAbVfWDYkiW52PRSP

3) Communicate with the local bitcoind associated with each
   address, and obtain the full public keys:

$ ./cosign pubkey.get mxDoMG9BogJ6kmgiTJNxhaAUUh11j3HWHr
$ ./cosign pubkey.get myGFNvUkRL3DTWHgKvuv29JW1TkcaihsSN
$ ./cosign pubkey.get mr3q8AeyLX53h9JctDAbVfWDYkiW52PRSP

And we see the database has been updated with our three public keys:
$ ./cosign dump
{ pubkeys: 
   [ '02affe9b8160e2d2b492389501407355cc19603ed99bbe542a6799447ea735b453',
     '02c2f5e2c376d0e0963f0a3a798877788f94c440f621a6493582b63f08bb55d1da',
     '025fcbc602f0f6ef5a488362e76e4a1ce15eb0a16921c050741831348190369ab5' ] }

4) Set number of signatures required.

$ ./cosign nreq 2

5) Use this data to add a multisig payment address to bitcoind's wallet.

$ ./cosign wallet.msig
2MsfxrcnDNF1kHJRxXT11TnAgDvVHkEvzSd

6) Send bitcoins to the multisig address.

$ ./bitcoind -testnet sendtoaddress 2MsfxrcnDNF1kHJRxXT11TnAgDvVHkEvzSd 1.5
ad39b5d53230af4784fb46720e5bc474f16a97a2fc6e85eed5fd3ef423e97885

Inspect the transaction, if you're curious:
$ ./bitcoind -testnet getrawtransaction ad39b5d53230af4784fb46720e5bc474f16a97a2fc6e85eed5fd3ef423e97885 1

7) Time passes.  Now, at least two parties are happy, and want
   to spend the bitcoins.

8) Create inputs for the spend-bitcoins transactions.

$ ./cosign inputs ad39b5d53230af4784fb46720e5bc474f16a97a2fc6e85eed5fd3ef423e97885 0

9) Create outputs for the spend-bitcoins transactions.
mftotywBYNSHjYCL1x4XWTkoac3t71UYL1 is the recipient in this example.

$ ./cosign outputs mftotywBYNSHjYCL1x4XWTkoac3t71UYL1 1.5

10) Serialize the inputs and outputs into a raw transaction.

$ ./cosign raw.create

Inspecting the database demonstrates the fruit of all our labors:
"raw" contains the serialized, unsigned transaction.

$ ./cosign dump
{ pubkeys: 
   [ '02affe9b8160e2d2b492389501407355cc19603ed99bbe542a6799447ea735b453',
     '02c2f5e2c376d0e0963f0a3a798877788f94c440f621a6493582b63f08bb55d1da',
     '025fcbc602f0f6ef5a488362e76e4a1ce15eb0a16921c050741831348190369ab5' ],
  n_required: 2,
  inputs: 
   [ { txid: 'ad39b5d53230af4784fb46720e5bc474f16a97a2fc6e85eed5fd3ef423e97885',
       vout: 0 } ],
  outputs: { mftotywBYNSHjYCL1x4XWTkoac3t71UYL1: 1.5 },
  raw: '01000000018578e923f43efdd5ee856efca2976af174c45b0e7246fb8447af3032d5b539ad0000000000ffffffff0180d1f008000000001976a9140422241b3efea67ae03dfec9a389d06e4550d28288ac00000000' }

11) Sign the raw transaction.

$ ./cosign raw.sign
sigs:complete
raw:updated

In this simple example, all keys were in one bitcoind, and the
transaction is now fully signed ("sigs:complete").  A more realistic
example will use "raw.read" and "raw.write" to exchange partially
signed raw transactions among multiple parties.

12) Broadcast the signed transaction to the network

$ ./cosign raw.send
ca02bc7bdaf8a79b150e825e3d528620092ed42d68d649738381102aa1f0d9fe

